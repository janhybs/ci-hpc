project: flow123d
workdir: <flow123d-workdir>
init-shell: !readfile scripts/init-shell.sh


stages:
  # ----------------------------------------------------------------------------
  # ------------------------------------------------------------ COMPILATION ---
  # this stage compiles flow123d (or uses cached build)
  # ----------------------------------------------------------------------------
  - stage: compile
    shell: !readfile scripts/install.sh
    git:   !readyaml yamls/git-repository.yaml
    cache: !readyaml yamls/cache-build.yaml



  # ----------------------------------------------------------------------------
  # ---------------------------------------------------------- MESH DOWNLOAD ---
  # to specify what files will be downloaded from astra.cxi.tul.cz,
  # see configuration yaml file:
  #     user/mesh-download-list.yaml
  # ----------------------------------------------------------------------------
  - stage: download
    shell: !readfile scripts/download-mesh.sh
    # which files will be downloaded
    variables: !readyaml user/mesh-download-list.yaml



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-WEAK ---
  # test weak contains all the tests but is testing
  # weak scaling only, one repetition with takes about
  #   1200 seconds (if 8 MPI processes are runinng at once at most)
  # 
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-weak.yaml
  # ----------------------------------------------------------------------------
  - stage: test-weak
    enabled: false
    shell: !readfile scripts/run-test.sh
    # which benchmark will be tested
    variables: !readyaml user/benchmark-list-test-weak.yaml
    # how we want to collect the results
    collect: !readyaml yamls/test-collect.yaml

    # how many repetitions we want for each benchmark
    repeat:
      exactly: 5        # we want to have 5 repetitions by default
      no-less-than: 5   # but with access to the db, we want to have 5 in total

    # how many cores we want to use on a computing node
    parallel:
      cpus: <cpu-value>   # we want to use 8 cores at max
      prop: <cpu>         # by default each 'worker' will use <cpu> of cpus



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-FULL ---
  # test full contains all the tests and includes weak and strong scaling
  # one repetition with takes about
  #   4956 seconds (if 4 MPI processes are runinng at once at most)
  #   2048 seconds (if 8 MPI processes are runinng at once at most)
  # 
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-full.yaml
  # ----------------------------------------------------------------------------
  - stage: test-full
    enabled: false
    shell: !readfile scripts/run-test.sh
    variables: !readyaml user/benchmark-list-test-full.yaml
    collect: !readyaml yamls/test-collect.yaml
    repeat: 1
    parallel:
      cpus: <cpu-value>   # we want to use 8 cores at max
      prop: <cpu>         # by default each 'worker' will use <cpu> of cpus



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-FULL ---
  # test serial contains most of the tests in serial experiment
  # one repetition with takes about
  #   4956 seconds (if 4 MPI processes are runinng at once at most)
  #   2048 seconds (if 8 MPI processes are runinng at once at most)
  #
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-serial.yaml
  # ----------------------------------------------------------------------------
  - stage: test-serial
    enabled: true
    shell: !readfile scripts/run-test.sh
    variables: !readyaml user/benchmark-list-test-serial.yaml
    collect: !readyaml yamls/test-collect.yaml
    repeat: 5
    parallel:
      cpus: <cpu-value>   # we want limit how many core we use
      prop: 1             # each 'worker' will count as single MPI process



  # ----------------------------------------------------------------------------
  # ---------------------------------------------------------------- CLEANUP ---
  # this stage removes old profilers
  # ----------------------------------------------------------------------------
  - stage: cleanup
    shell: !readfile scripts/clean-files.sh
