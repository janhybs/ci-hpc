project: flow123d
workdir: <flow123d-workdir>
# init-shell: !readfile scripts/init-shell.sh

git:
  # main flow123d repository
  - url: https://github.com/flow123d/flow123d.git
    commit: <arg.commit.flow123d>   # checkout to this commit
    branch: <arg.branch.flow123d>   # under this branch's name
  # benchmark repository, will always be at latest commit
  - url: https://github.com/flow123d/bench_data.git


stages:
  # ----------------------------------------------------------------------------
  # ------------------------------------------------------------ COMPILATION ---
  # this stage compiles flow123d (or uses cached build)
  # ----------------------------------------------------------------------------
  - stage: compile
    output: stdout
    shell: !readfile scripts/install.sh
    cache: !readyaml yamls/cache-build.yaml
  
  - stage: verify
    output: stdout
    shell: !readfile scripts/verify-installation.sh
    on-error: exit


  # ----------------------------------------------------------------------------
  # ---------------------------------------------------------- MESH DOWNLOAD ---
  # to specify what files will be downloaded from astra.cxi.tul.cz,
  # see configuration yaml file:
  #     user/mesh-download-list.yaml
  # ----------------------------------------------------------------------------
  - stage: download
    shell: !readfile scripts/download-mesh.sh
    # which files will be downloaded
    variables: !readyaml user/mesh-download-list.yaml



  # 2 benchmarks on 4 meshes (40 cases in total)
  - stage:      test
    shell:      !readfile scripts/flow.sh
    variables:  !readyaml user/benchmark-list-small.yaml
    repeat:
      no-less-than: 5
    index:
      branch:     <git.branch>  # name of the branch
      commit:     <git.commit>  # long hash of current commit
      mesh_cpus:  <mesh|0i>     # e.g. from value '1_15786_el' will get integer 1
      mesh_size:  <mesh|1i>     # e.g. from value '1_15786_el' will get integer 15786
      benchmark:  <benchmark>   # benchmark such as '01_square_regular_grid'
      test:       <test>
      cpus:       0             # 0 means no mpi was used
      frame:      whole-program
    collect:
      files:    <tmp>/<project-name>/<__unique__>/profiler_info*.json
      module:   cihpc.artifacts.modules.flow123d_profiler_module_flatten
      move-to:  <flow123d-workdir>/artifacts/<__project__.start.datetime>



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-WEAK ---
  # test weak contains all the tests but is testing
  # weak scaling only, one repetition with takes about
  #   1200 seconds (if 8 MPI processes are runinng at once at most)
  # 
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-weak.yaml
  # ----------------------------------------------------------------------------
  - stage: test-weak
    enabled: false
    shell: !readfile scripts/run-test.sh
    # which benchmark will be tested
    variables: !readyaml user/benchmark-list-test-weak.yaml
    # how we want to collect the results
    collect: !readyaml yamls/test-collect.yaml

    # how many repetitions we want for each benchmark
    repeat:
      exactly: 5        # we want to have 5 repetitions by default
      no-less-than: 5   # but with access to the db, we want to have 5 in total

    # how many cores we want to use on a computing node
    parallel:
      cpus: <cpu-value>   # we want to use 8 cores at max
      prop: <cpu>         # by default each 'worker' will use <cpu> of cpus



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-FULL ---
  # test full contains all the tests and includes weak and strong scaling
  # one repetition with takes about
  #   4956 seconds (if 4 MPI processes are runinng at once at most)
  #   2048 seconds (if 8 MPI processes are runinng at once at most)
  # 
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-full.yaml
  # ----------------------------------------------------------------------------
  - stage: test-full
    enabled: false
    shell: !readfile scripts/run-test.sh
    variables: !readyaml user/benchmark-list-test-full.yaml
    collect: !readyaml yamls/test-collect.yaml
    repeat: 1
    parallel:
      cpus: <cpu-value>   # we want to use 8 cores at max
      prop: <cpu>         # by default each 'worker' will use <cpu> of cpus



  # ----------------------------------------------------------------------------
  # -------------------------------------------------------------- TEST-FULL ---
  # test serial contains most of the tests in serial experiment
  # one repetition with takes about
  #   4956 seconds (if 4 MPI processes are runinng at once at most)
  #   2048 seconds (if 8 MPI processes are runinng at once at most)
  #
  # to specify what benchmarks will be tested,
  # see the configuration yaml file:
  #     user/benchmark-list-test-serial.yaml
  # ----------------------------------------------------------------------------
  - stage: test-serial
    enabled: true
    shell: !readfile scripts/run-test.sh
    variables: !readyaml user/benchmark-list-test-serial.yaml
    collect: !readyaml yamls/test-collect.yaml
    repeat: 5
    parallel:
      cpus: <cpu-value>   # we want limit how many core we use
      prop: 1             # each 'worker' will count as single MPI process



  # ----------------------------------------------------------------------------
  # ---------------------------------------------------------------- CLEANUP ---
  # this stage removes old profilers
  # ----------------------------------------------------------------------------
  - stage: cleanup
    shell: !readfile scripts/clean-files.sh
