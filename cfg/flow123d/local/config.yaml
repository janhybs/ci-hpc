workdir: <flow123d-workdir>
init-shell: |
  export FLOW123D_HOME=<flow123d-home>


install:
  - name: compile-flow123d
    output: stdout
    git:
      - url: https://github.com/flow123d/flow123d.git
        commit: <arg.commit.flow123d>   # checkout to this commit
        branch: <arg.branch.flow123d>   # under this branch's name
      - url: https://github.com/flow123d/bench_data.git
        
    shell: |
      make -C bench_data/benchmarks download
      
      cd flow123d
      cp config/config-cihpc-meta.cmake config.cmake
      make -j4
      bin/flow123d --help


test:
  - name: benchmarks
    output: stdout
    
    repeat:
      exactly: 5          # we want to have 5 repetitions by default
      no-less-than: 5    # but with access to the db, we want to have 15 in total
    
    parallell:
      cpus: all           # we want to use as many cpus as there are on this node
      prop: <cpu>         # by default each 'worker' will use <cpu> of cpus
    
    container: docker run --rm -v $(pwd):$(pwd) -w $(pwd) flow123d/flow-libs-dev-dbg:3.0.0 %s

    collect:
      files: <flow123d-workdir>/bench_data/**/test_results-<__unique__>/**/profiler_info*.json
      move-to: <flow123d-workdir>/artifacts/<__project__.start.datetime>
      repo: <flow123d-home>
      save-to-db: true
      module: artifacts.collect.modules.flow123d_profiler_module
    
      extra:
        cpu-value:  <cpu-value>
        test-name:  <benchmark>
        mesh:       <mesh>
        weak:       <weak|b>
        strong:     <strong|b>
        cpu:        <cpu|i>
        cl:         local
        serial:     1
          
    shell: |
      echo "BENCHMARK: <benchmark>, INPUT-DIR: <mesh>, CPU: <cpu>"
      python3 flow123d/bin/python/runtest.py \
          bench_data/benchmarks/<benchmark>/ \
          --cpu <cpu>                        \
          --status-file                      \
          --no-compare                       \
          --random-output-dir <__unique__>   \
          -a -- --input_dir <mesh>
    
    variables:
      # for testing purposes
      - values:
        - benchmark:  01_square_regular_grid
        - mesh:       [1_15662_el, 2_31498_el, 2_31498_el, 2_31498_el]
        - cpu:        [1,          2,          1,          2         ]
        - weak:       [1,          1,          0,          0         ]
        - strong:     [0,          0,          1,          1         ]
      
      # - values:
      #   - benchmark:  01_square_regular_grid
      #   - mesh:       1_15662_el
      #   - weak:       true
      #   - strong:     false
      #   - cpu:        1
      # ------------------------------------------------------------------------
      
      # # 01_square_regular_grid
      # # weak scale
      # - values:
      #   - benchmark:  01_square_regular_grid
      #   - mesh:       [1_15662_el,      2_31498_el,      3_47122_el,      4_62302_el ]
      #   - weak:       [true      ,      true      ,      true      ,      true       ]
      #   - strong:     [false     ,      false     ,      false     ,      true       ]
      #   - cpu:        [1         ,      2         ,      3         ,      4          ]
      # # strong scale
      # - values:
      #   - benchmark:  01_square_regular_grid
      #   - mesh:       [8_124498_el,     8_124498_el,     8_124498_el,     8_124498_el]
      #   - weak:       [false      ,     false      ,     false      ,     false      ]
      #   - strong:     [true       ,     true       ,     true       ,     true       ]
      #   - cpu:        [1          ,     2          ,     3          ,     4          ]
      # # ------------------------------------------------------------------------
      # # 02_cube_123d
      # # weak scale
      # - values:
      #   - benchmark:  02_cube_123d
      #   - mesh:       [1_15786_el,      2_29365_el,      3_47367_el,      4_58803_el ]
      #   - weak:       [true      ,      true      ,      true      ,      true       ]
      #   - strong:     [false     ,      false     ,      false     ,      true       ]
      #   - cpu:        [1         ,      2         ,      3         ,      4          ]
      # # strong scale
      # - values:
      #   - benchmark:  02_cube_123d
      #   - mesh:       [8_118696_el,     8_118696_el,     8_118696_el,     8_118696_el]
      #   - weak:       [false      ,     false      ,     false      ,     false      ]
      #   - strong:     [true       ,     true       ,     true       ,     true       ]
      #   - cpu:        [1          ,     2          ,     3          ,     4          ]
      # # ------------------------------------------------------------------------
      # # 03_mesh_read
      # # weak scale
      # - values:
      #   - benchmark:  03_mesh_read
      #   - mesh:       [1_15786_el,      2_29365_el,      3_47367_el,      4_58803_el ]
      #   - weak:       [true      ,      true      ,      true      ,      true       ]
      #   - strong:     [false     ,      false     ,      false     ,      true       ]
      #   - cpu:        [1         ,      2         ,      3         ,      4          ]
      # # strong scale
      # - values:
      #   - benchmark:  03_mesh_read
      #   - mesh:       [8_118696_el,     8_118696_el,     8_118696_el,     8_118696_el]
      #   - weak:       [false      ,     false      ,     false      ,     false      ]
      #   - strong:     [true       ,     true       ,     true       ,     true       ]
      #   - cpu:        [1          ,     2          ,     3          ,     4          ]
      # # ------------------------------------------------------------------------
      # # 05_dfn_2d
      # # strong scale
      # - values:
      #   - benchmark:  05_dfn_2d
      #   - mesh:       1_1618_el
      #   - weak:       [true      ,      true      ,      true      ,    true         ]
      #   - strong:     [false     ,      false     ,      false     ,    true         ]
      #   - cpu:        [1         ,      2         ,      3         ,    4            ]
      # # ------------------------------------------------------------------------
      # # 04_kravi_hora
      # # strong scale
      # # - values:
      # #   - benchmark: 04_kravi_hora
      # #   - mesh:   1_212773_el
      # #   - weak:   True
      # #   - strong: False
      # #   - cpu:    1

# 
# R=$(pwd)/flow123d/bin/python/runtest.py
# B=bench_data/benchmarks
# 
# python3 $R $B/02_cube_123d/ --cpu 1 -a -- -i 1_15786_el
# 
# 
# Summary: 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_LMH_dg_heat             [132.81  sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_LMH_richards            [1257.25 sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_bddc                    [14.08   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_bddc_fieldformula       [14.09   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_dg_sorption             [87.65   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_fv                      [14.09   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_fv_sorption             [17.94   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_unsteady_dg             [157.96  sec] 
#     ------------------------------------------------------------
#     [ PASSED ]  | passed=8, failed=0, skipped=0 in              [1695.87 sec]



# Summary: 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_LMH_dg_heat             [132.81  sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_LMH_richards            [1257.25 sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_bddc                    [14.08   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_bddc_fieldformula       [14.09   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_dg_sorption             [87.65   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_fv                      [14.09   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_fv_sorption             [17.94   sec] 
#     [ PASSED ]  | 1 x 02_cube_123d/flow_unsteady_dg             [157.96  sec] 
#     ------------------------------------------------------------
#     [ PASSED ]  | passed=8, failed=0, skipped=0 in              [1695.87 sec]

# R=/storage/praha1/home/jan-hybs/projects/ci-hpc/projects/flow123d
# python3 $R 01_square_regular_grid/transport.yaml --cpu 1 -- -i 1_15662_el
# python3 $R 02_cube_123d/flow_unsteady_dg.yaml --cpu 1 -- -i 1_15786_el
# python3 $R 03_mesh_read/mesh_read.yaml --cpu 1 -- -i 1_15786_el
# python3 $R 03_mesh_read/mesh_read.yaml --cpu 2 -- -i 4_58803_el
# python3 $R 04_kravi_hora/flow.yaml --cpu 1 -- -i 1_15786_el
# python3 $R 05_dfn_2d/transport.yaml --cpu 1 -- -i 1_1618_el
# 
# 
# python3 $R 02_cube_123d/flow_dg_sorption.yaml --cpu 1 -a --status-file -- -i 1_15786_el && \
# python3 $R 02_cube_123d/flow_dg_sorption.yaml --cpu 2 -a --status-file -- -i 2_29365_el && \
# python3 $R 02_cube_123d/flow_dg_sorption.yaml --cpu 3 -a --status-file -- -i 3_47367_el && \
# python3 $R 02_cube_123d/flow_dg_sorption.yaml --cpu 4 -a --status-file -- -i 4_58803_el && \
# python3 $R 02_cube_123d/flow_unsteady_dg.yaml --cpu 1 -a --status-file -- -i 1_15786_el && \
# python3 $R 02_cube_123d/flow_unsteady_dg.yaml --cpu 2 -a --status-file -- -i 2_29365_el && \
# python3 $R 02_cube_123d/flow_unsteady_dg.yaml --cpu 3 -a --status-file -- -i 3_47367_el && \
# python3 $R 02_cube_123d/flow_unsteady_dg.yaml --cpu 4 -a --status-file -- -i 4_58803_el
