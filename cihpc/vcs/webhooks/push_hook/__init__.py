#!/usr/bin/python3
# author: Jan Hybs

# AUTOGENERATED CODE BY
# https://app.quicktype.io/

# This autogenerated cody describes GitHub Push event webhook
# https://developer.github.com/v3/activity/events/types/#pushevent


# use following function to parse/dump PushWebhook
#   def push_webhook_from_dict(s: Any) -> PushWebhook
#   def push_webhook_to_dict(x: PushWebhook) -> Any

from typing import Optional, Any, List, TypeVar, Callable, Type, cast
from datetime import datetime
import dateutil.parser


T = TypeVar("T")


def from_str(x: Any) -> str:
    assert isinstance(x, str)
    return x


def from_none(x: Any) -> Any:
    assert x is None
    return x


def from_union(fs, x):
    for f in fs:
        try:
            return f(x)
        except:
            pass
    assert False


def from_bool(x: Any) -> bool:
    assert isinstance(x, bool)
    return x


def from_datetime(x: Any) -> datetime:
    return dateutil.parser.parse(x)


def from_list(f: Callable[[Any], T], x: Any) -> List[T]:
    assert isinstance(x, list)
    return [f(y) for y in x]


def to_class(c: Type[T], x: Any) -> dict:
    assert isinstance(x, c)
    return cast(Any, x).to_dict()


def from_int(x: Any) -> int:
    assert isinstance(x, int) and not isinstance(x, bool)
    return x


class Author:
    name: Optional[str]
    email: Optional[str]
    username: Optional[str]

    def __init__(self, name: Optional[str], email: Optional[str], username: Optional[str]) -> None:
        self.name = name
        self.email = email
        self.username = username

    @staticmethod
    def from_dict(obj: Any) -> 'Author':
        assert isinstance(obj, dict)
        name = from_union([from_str, from_none], obj.get("name"))
        email = from_union([from_str, from_none], obj.get("email"))
        username = from_union([from_str, from_none], obj.get("username"))
        return Author(name, email, username)

    def to_dict(self) -> dict:
        result: dict = {}
        result["name"] = from_union([from_str, from_none], self.name)
        result["email"] = from_union([from_str, from_none], self.email)
        result["username"] = from_union([from_str, from_none], self.username)
        return result


class Commit:
    id: Optional[str]
    tree_id: Optional[str]
    distinct: Optional[bool]
    message: Optional[str]
    timestamp: Optional[datetime]
    url: Optional[str]
    author: Optional[Author]
    committer: Optional[Author]
    added: Optional[List[Any]]
    removed: Optional[List[Any]]
    modified: Optional[List[str]]

    def __init__(self, id: Optional[str], tree_id: Optional[str], distinct: Optional[bool], message: Optional[str],
                 timestamp: Optional[datetime], url: Optional[str], author: Optional[Author],
                 committer: Optional[Author], added: Optional[List[Any]], removed: Optional[List[Any]],
                 modified: Optional[List[str]]) -> None:
        self.id = id
        self.tree_id = tree_id
        self.distinct = distinct
        self.message = message
        self.timestamp = timestamp
        self.url = url
        self.author = author
        self.committer = committer
        self.added = added
        self.removed = removed
        self.modified = modified

    @staticmethod
    def from_dict(obj: Any) -> 'Commit':
        assert isinstance(obj, dict)
        id = from_union([from_str, from_none], obj.get("id"))
        tree_id = from_union([from_str, from_none], obj.get("tree_id"))
        distinct = from_union([from_bool, from_none], obj.get("distinct"))
        message = from_union([from_str, from_none], obj.get("message"))
        timestamp = from_union([from_datetime, from_none], obj.get("timestamp"))
        url = from_union([from_str, from_none], obj.get("url"))
        author = from_union([Author.from_dict, from_none], obj.get("author"))
        committer = from_union([Author.from_dict, from_none], obj.get("committer"))
        added = from_union([lambda x: from_list(lambda x: x, x), from_none], obj.get("added"))
        removed = from_union([lambda x: from_list(lambda x: x, x), from_none], obj.get("removed"))
        modified = from_union([lambda x: from_list(from_str, x), from_none], obj.get("modified"))
        return Commit(id, tree_id, distinct, message, timestamp, url, author, committer, added, removed, modified)

    def to_dict(self) -> dict:
        result: dict = {}
        result["id"] = from_union([from_str, from_none], self.id)
        result["tree_id"] = from_union([from_str, from_none], self.tree_id)
        result["distinct"] = from_union([from_bool, from_none], self.distinct)
        result["message"] = from_union([from_str, from_none], self.message)
        result["timestamp"] = from_union([lambda x: x.isoformat(), from_none], self.timestamp)
        result["url"] = from_union([from_str, from_none], self.url)
        result["author"] = from_union([lambda x: to_class(Author, x), from_none], self.author)
        result["committer"] = from_union([lambda x: to_class(Author, x), from_none], self.committer)
        result["added"] = from_union([lambda x: from_list(lambda x: x, x), from_none], self.added)
        result["removed"] = from_union([lambda x: from_list(lambda x: x, x), from_none], self.removed)
        result["modified"] = from_union([lambda x: from_list(from_str, x), from_none], self.modified)
        return result


class Pusher:
    name: Optional[str]
    email: Optional[str]

    def __init__(self, name: Optional[str], email: Optional[str]) -> None:
        self.name = name
        self.email = email

    @staticmethod
    def from_dict(obj: Any) -> 'Pusher':
        assert isinstance(obj, dict)
        name = from_union([from_str, from_none], obj.get("name"))
        email = from_union([from_str, from_none], obj.get("email"))
        return Pusher(name, email)

    def to_dict(self) -> dict:
        result: dict = {}
        result["name"] = from_union([from_str, from_none], self.name)
        result["email"] = from_union([from_str, from_none], self.email)
        return result


class Sender:
    name: Optional[str]
    email: Optional[str]
    login: Optional[str]
    id: Optional[int]
    node_id: Optional[str]
    avatar_url: Optional[str]
    gravatar_id: Optional[str]
    url: Optional[str]
    html_url: Optional[str]
    followers_url: Optional[str]
    following_url: Optional[str]
    gists_url: Optional[str]
    starred_url: Optional[str]
    subscriptions_url: Optional[str]
    organizations_url: Optional[str]
    repos_url: Optional[str]
    events_url: Optional[str]
    received_events_url: Optional[str]
    type: Optional[str]
    site_admin: Optional[bool]

    def __init__(self, name: Optional[str], email: Optional[str], login: Optional[str], id: Optional[int],
                 node_id: Optional[str], avatar_url: Optional[str], gravatar_id: Optional[str], url: Optional[str],
                 html_url: Optional[str], followers_url: Optional[str], following_url: Optional[str],
                 gists_url: Optional[str], starred_url: Optional[str], subscriptions_url: Optional[str],
                 organizations_url: Optional[str], repos_url: Optional[str], events_url: Optional[str],
                 received_events_url: Optional[str], type: Optional[str], site_admin: Optional[bool]) -> None:
        self.name = name
        self.email = email
        self.login = login
        self.id = id
        self.node_id = node_id
        self.avatar_url = avatar_url
        self.gravatar_id = gravatar_id
        self.url = url
        self.html_url = html_url
        self.followers_url = followers_url
        self.following_url = following_url
        self.gists_url = gists_url
        self.starred_url = starred_url
        self.subscriptions_url = subscriptions_url
        self.organizations_url = organizations_url
        self.repos_url = repos_url
        self.events_url = events_url
        self.received_events_url = received_events_url
        self.type = type
        self.site_admin = site_admin

    @staticmethod
    def from_dict(obj: Any) -> 'Sender':
        assert isinstance(obj, dict)
        name = from_union([from_str, from_none], obj.get("name"))
        email = from_union([from_str, from_none], obj.get("email"))
        login = from_union([from_str, from_none], obj.get("login"))
        id = from_union([from_int, from_none], obj.get("id"))
        node_id = from_union([from_str, from_none], obj.get("node_id"))
        avatar_url = from_union([from_str, from_none], obj.get("avatar_url"))
        gravatar_id = from_union([from_str, from_none], obj.get("gravatar_id"))
        url = from_union([from_str, from_none], obj.get("url"))
        html_url = from_union([from_str, from_none], obj.get("html_url"))
        followers_url = from_union([from_str, from_none], obj.get("followers_url"))
        following_url = from_union([from_str, from_none], obj.get("following_url"))
        gists_url = from_union([from_str, from_none], obj.get("gists_url"))
        starred_url = from_union([from_str, from_none], obj.get("starred_url"))
        subscriptions_url = from_union([from_str, from_none], obj.get("subscriptions_url"))
        organizations_url = from_union([from_str, from_none], obj.get("organizations_url"))
        repos_url = from_union([from_str, from_none], obj.get("repos_url"))
        events_url = from_union([from_str, from_none], obj.get("events_url"))
        received_events_url = from_union([from_str, from_none], obj.get("received_events_url"))
        type = from_union([from_str, from_none], obj.get("type"))
        site_admin = from_union([from_bool, from_none], obj.get("site_admin"))
        return Sender(name, email, login, id, node_id, avatar_url, gravatar_id, url, html_url, followers_url,
                      following_url, gists_url, starred_url, subscriptions_url, organizations_url, repos_url,
                      events_url, received_events_url, type, site_admin)

    def to_dict(self) -> dict:
        result: dict = {}
        result["name"] = from_union([from_str, from_none], self.name)
        result["email"] = from_union([from_str, from_none], self.email)
        result["login"] = from_union([from_str, from_none], self.login)
        result["id"] = from_union([from_int, from_none], self.id)
        result["node_id"] = from_union([from_str, from_none], self.node_id)
        result["avatar_url"] = from_union([from_str, from_none], self.avatar_url)
        result["gravatar_id"] = from_union([from_str, from_none], self.gravatar_id)
        result["url"] = from_union([from_str, from_none], self.url)
        result["html_url"] = from_union([from_str, from_none], self.html_url)
        result["followers_url"] = from_union([from_str, from_none], self.followers_url)
        result["following_url"] = from_union([from_str, from_none], self.following_url)
        result["gists_url"] = from_union([from_str, from_none], self.gists_url)
        result["starred_url"] = from_union([from_str, from_none], self.starred_url)
        result["subscriptions_url"] = from_union([from_str, from_none], self.subscriptions_url)
        result["organizations_url"] = from_union([from_str, from_none], self.organizations_url)
        result["repos_url"] = from_union([from_str, from_none], self.repos_url)
        result["events_url"] = from_union([from_str, from_none], self.events_url)
        result["received_events_url"] = from_union([from_str, from_none], self.received_events_url)
        result["type"] = from_union([from_str, from_none], self.type)
        result["site_admin"] = from_union([from_bool, from_none], self.site_admin)
        return result


class Repository:
    id: Optional[int]
    node_id: Optional[str]
    name: Optional[str]
    full_name: Optional[str]
    private: Optional[bool]
    owner: Optional[Sender]
    html_url: Optional[str]
    description: Optional[str]
    fork: Optional[bool]
    url: Optional[str]
    forks_url: Optional[str]
    keys_url: Optional[str]
    collaborators_url: Optional[str]
    teams_url: Optional[str]
    hooks_url: Optional[str]
    issue_events_url: Optional[str]
    events_url: Optional[str]
    assignees_url: Optional[str]
    branches_url: Optional[str]
    tags_url: Optional[str]
    blobs_url: Optional[str]
    git_tags_url: Optional[str]
    git_refs_url: Optional[str]
    trees_url: Optional[str]
    statuses_url: Optional[str]
    languages_url: Optional[str]
    stargazers_url: Optional[str]
    contributors_url: Optional[str]
    subscribers_url: Optional[str]
    subscription_url: Optional[str]
    commits_url: Optional[str]
    git_commits_url: Optional[str]
    comments_url: Optional[str]
    issue_comment_url: Optional[str]
    contents_url: Optional[str]
    compare_url: Optional[str]
    merges_url: Optional[str]
    archive_url: Optional[str]
    downloads_url: Optional[str]
    issues_url: Optional[str]
    pulls_url: Optional[str]
    milestones_url: Optional[str]
    notifications_url: Optional[str]
    labels_url: Optional[str]
    releases_url: Optional[str]
    deployments_url: Optional[str]
    created_at: Optional[int]
    updated_at: Optional[datetime]
    pushed_at: Optional[int]
    git_url: Optional[str]
    ssh_url: Optional[str]
    clone_url: Optional[str]
    svn_url: Optional[str]
    homepage: None
    size: Optional[int]
    stargazers_count: Optional[int]
    watchers_count: Optional[int]
    language: Optional[str]
    has_issues: Optional[bool]
    has_projects: Optional[bool]
    has_downloads: Optional[bool]
    has_wiki: Optional[bool]
    has_pages: Optional[bool]
    forks_count: Optional[int]
    mirror_url: None
    archived: Optional[bool]
    open_issues_count: Optional[int]
    license: None
    forks: Optional[int]
    open_issues: Optional[int]
    watchers: Optional[int]
    default_branch: Optional[str]
    stargazers: Optional[int]
    master_branch: Optional[str]

    def __init__(self, id: Optional[int], node_id: Optional[str], name: Optional[str], full_name: Optional[str],
                 private: Optional[bool], owner: Optional[Sender], html_url: Optional[str], description: Optional[str],
                 fork: Optional[bool], url: Optional[str], forks_url: Optional[str], keys_url: Optional[str],
                 collaborators_url: Optional[str], teams_url: Optional[str], hooks_url: Optional[str],
                 issue_events_url: Optional[str], events_url: Optional[str], assignees_url: Optional[str],
                 branches_url: Optional[str], tags_url: Optional[str], blobs_url: Optional[str],
                 git_tags_url: Optional[str], git_refs_url: Optional[str], trees_url: Optional[str],
                 statuses_url: Optional[str], languages_url: Optional[str], stargazers_url: Optional[str],
                 contributors_url: Optional[str], subscribers_url: Optional[str], subscription_url: Optional[str],
                 commits_url: Optional[str], git_commits_url: Optional[str], comments_url: Optional[str],
                 issue_comment_url: Optional[str], contents_url: Optional[str], compare_url: Optional[str],
                 merges_url: Optional[str], archive_url: Optional[str], downloads_url: Optional[str],
                 issues_url: Optional[str], pulls_url: Optional[str], milestones_url: Optional[str],
                 notifications_url: Optional[str], labels_url: Optional[str], releases_url: Optional[str],
                 deployments_url: Optional[str], created_at: Optional[int], updated_at: Optional[datetime],
                 pushed_at: Optional[int], git_url: Optional[str], ssh_url: Optional[str], clone_url: Optional[str],
                 svn_url: Optional[str], homepage: None, size: Optional[int], stargazers_count: Optional[int],
                 watchers_count: Optional[int], language: Optional[str], has_issues: Optional[bool],
                 has_projects: Optional[bool], has_downloads: Optional[bool], has_wiki: Optional[bool],
                 has_pages: Optional[bool], forks_count: Optional[int], mirror_url: None, archived: Optional[bool],
                 open_issues_count: Optional[int], license: None, forks: Optional[int], open_issues: Optional[int],
                 watchers: Optional[int], default_branch: Optional[str], stargazers: Optional[int],
                 master_branch: Optional[str]) -> None:
        self.id = id
        self.node_id = node_id
        self.name = name
        self.full_name = full_name
        self.private = private
        self.owner = owner
        self.html_url = html_url
        self.description = description
        self.fork = fork
        self.url = url
        self.forks_url = forks_url
        self.keys_url = keys_url
        self.collaborators_url = collaborators_url
        self.teams_url = teams_url
        self.hooks_url = hooks_url
        self.issue_events_url = issue_events_url
        self.events_url = events_url
        self.assignees_url = assignees_url
        self.branches_url = branches_url
        self.tags_url = tags_url
        self.blobs_url = blobs_url
        self.git_tags_url = git_tags_url
        self.git_refs_url = git_refs_url
        self.trees_url = trees_url
        self.statuses_url = statuses_url
        self.languages_url = languages_url
        self.stargazers_url = stargazers_url
        self.contributors_url = contributors_url
        self.subscribers_url = subscribers_url
        self.subscription_url = subscription_url
        self.commits_url = commits_url
        self.git_commits_url = git_commits_url
        self.comments_url = comments_url
        self.issue_comment_url = issue_comment_url
        self.contents_url = contents_url
        self.compare_url = compare_url
        self.merges_url = merges_url
        self.archive_url = archive_url
        self.downloads_url = downloads_url
        self.issues_url = issues_url
        self.pulls_url = pulls_url
        self.milestones_url = milestones_url
        self.notifications_url = notifications_url
        self.labels_url = labels_url
        self.releases_url = releases_url
        self.deployments_url = deployments_url
        self.created_at = created_at
        self.updated_at = updated_at
        self.pushed_at = pushed_at
        self.git_url = git_url
        self.ssh_url = ssh_url
        self.clone_url = clone_url
        self.svn_url = svn_url
        self.homepage = homepage
        self.size = size
        self.stargazers_count = stargazers_count
        self.watchers_count = watchers_count
        self.language = language
        self.has_issues = has_issues
        self.has_projects = has_projects
        self.has_downloads = has_downloads
        self.has_wiki = has_wiki
        self.has_pages = has_pages
        self.forks_count = forks_count
        self.mirror_url = mirror_url
        self.archived = archived
        self.open_issues_count = open_issues_count
        self.license = license
        self.forks = forks
        self.open_issues = open_issues
        self.watchers = watchers
        self.default_branch = default_branch
        self.stargazers = stargazers
        self.master_branch = master_branch

    @staticmethod
    def from_dict(obj: Any) -> 'Repository':
        assert isinstance(obj, dict)
        id = from_union([from_int, from_none], obj.get("id"))
        node_id = from_union([from_str, from_none], obj.get("node_id"))
        name = from_union([from_str, from_none], obj.get("name"))
        full_name = from_union([from_str, from_none], obj.get("full_name"))
        private = from_union([from_bool, from_none], obj.get("private"))
        owner = from_union([Sender.from_dict, from_none], obj.get("owner"))
        html_url = from_union([from_str, from_none], obj.get("html_url"))
        description = from_union([from_str, from_none], obj.get("description"))
        fork = from_union([from_bool, from_none], obj.get("fork"))
        url = from_union([from_str, from_none], obj.get("url"))
        forks_url = from_union([from_str, from_none], obj.get("forks_url"))
        keys_url = from_union([from_str, from_none], obj.get("keys_url"))
        collaborators_url = from_union([from_str, from_none], obj.get("collaborators_url"))
        teams_url = from_union([from_str, from_none], obj.get("teams_url"))
        hooks_url = from_union([from_str, from_none], obj.get("hooks_url"))
        issue_events_url = from_union([from_str, from_none], obj.get("issue_events_url"))
        events_url = from_union([from_str, from_none], obj.get("events_url"))
        assignees_url = from_union([from_str, from_none], obj.get("assignees_url"))
        branches_url = from_union([from_str, from_none], obj.get("branches_url"))
        tags_url = from_union([from_str, from_none], obj.get("tags_url"))
        blobs_url = from_union([from_str, from_none], obj.get("blobs_url"))
        git_tags_url = from_union([from_str, from_none], obj.get("git_tags_url"))
        git_refs_url = from_union([from_str, from_none], obj.get("git_refs_url"))
        trees_url = from_union([from_str, from_none], obj.get("trees_url"))
        statuses_url = from_union([from_str, from_none], obj.get("statuses_url"))
        languages_url = from_union([from_str, from_none], obj.get("languages_url"))
        stargazers_url = from_union([from_str, from_none], obj.get("stargazers_url"))
        contributors_url = from_union([from_str, from_none], obj.get("contributors_url"))
        subscribers_url = from_union([from_str, from_none], obj.get("subscribers_url"))
        subscription_url = from_union([from_str, from_none], obj.get("subscription_url"))
        commits_url = from_union([from_str, from_none], obj.get("commits_url"))
        git_commits_url = from_union([from_str, from_none], obj.get("git_commits_url"))
        comments_url = from_union([from_str, from_none], obj.get("comments_url"))
        issue_comment_url = from_union([from_str, from_none], obj.get("issue_comment_url"))
        contents_url = from_union([from_str, from_none], obj.get("contents_url"))
        compare_url = from_union([from_str, from_none], obj.get("compare_url"))
        merges_url = from_union([from_str, from_none], obj.get("merges_url"))
        archive_url = from_union([from_str, from_none], obj.get("archive_url"))
        downloads_url = from_union([from_str, from_none], obj.get("downloads_url"))
        issues_url = from_union([from_str, from_none], obj.get("issues_url"))
        pulls_url = from_union([from_str, from_none], obj.get("pulls_url"))
        milestones_url = from_union([from_str, from_none], obj.get("milestones_url"))
        notifications_url = from_union([from_str, from_none], obj.get("notifications_url"))
        labels_url = from_union([from_str, from_none], obj.get("labels_url"))
        releases_url = from_union([from_str, from_none], obj.get("releases_url"))
        deployments_url = from_union([from_str, from_none], obj.get("deployments_url"))
        created_at = from_union([from_int, from_none], obj.get("created_at"))
        updated_at = from_union([from_datetime, from_none], obj.get("updated_at"))
        pushed_at = from_union([from_int, from_none], obj.get("pushed_at"))
        git_url = from_union([from_str, from_none], obj.get("git_url"))
        ssh_url = from_union([from_str, from_none], obj.get("ssh_url"))
        clone_url = from_union([from_str, from_none], obj.get("clone_url"))
        svn_url = from_union([from_str, from_none], obj.get("svn_url"))
        homepage = from_none(obj.get("homepage"))
        size = from_union([from_int, from_none], obj.get("size"))
        stargazers_count = from_union([from_int, from_none], obj.get("stargazers_count"))
        watchers_count = from_union([from_int, from_none], obj.get("watchers_count"))
        language = from_union([from_str, from_none], obj.get("language"))
        has_issues = from_union([from_bool, from_none], obj.get("has_issues"))
        has_projects = from_union([from_bool, from_none], obj.get("has_projects"))
        has_downloads = from_union([from_bool, from_none], obj.get("has_downloads"))
        has_wiki = from_union([from_bool, from_none], obj.get("has_wiki"))
        has_pages = from_union([from_bool, from_none], obj.get("has_pages"))
        forks_count = from_union([from_int, from_none], obj.get("forks_count"))
        mirror_url = from_none(obj.get("mirror_url"))
        archived = from_union([from_bool, from_none], obj.get("archived"))
        open_issues_count = from_union([from_int, from_none], obj.get("open_issues_count"))
        license = from_none(obj.get("license"))
        forks = from_union([from_int, from_none], obj.get("forks"))
        open_issues = from_union([from_int, from_none], obj.get("open_issues"))
        watchers = from_union([from_int, from_none], obj.get("watchers"))
        default_branch = from_union([from_str, from_none], obj.get("default_branch"))
        stargazers = from_union([from_int, from_none], obj.get("stargazers"))
        master_branch = from_union([from_str, from_none], obj.get("master_branch"))
        return Repository(id, node_id, name, full_name, private, owner, html_url, description, fork, url, forks_url,
                          keys_url, collaborators_url, teams_url, hooks_url, issue_events_url, events_url,
                          assignees_url, branches_url, tags_url, blobs_url, git_tags_url, git_refs_url, trees_url,
                          statuses_url, languages_url, stargazers_url, contributors_url, subscribers_url,
                          subscription_url, commits_url, git_commits_url, comments_url, issue_comment_url, contents_url,
                          compare_url, merges_url, archive_url, downloads_url, issues_url, pulls_url, milestones_url,
                          notifications_url, labels_url, releases_url, deployments_url, created_at, updated_at,
                          pushed_at, git_url, ssh_url, clone_url, svn_url, homepage, size, stargazers_count,
                          watchers_count, language, has_issues, has_projects, has_downloads, has_wiki, has_pages,
                          forks_count, mirror_url, archived, open_issues_count, license, forks, open_issues, watchers,
                          default_branch, stargazers, master_branch)

    def to_dict(self) -> dict:
        result: dict = {}
        result["id"] = from_union([from_int, from_none], self.id)
        result["node_id"] = from_union([from_str, from_none], self.node_id)
        result["name"] = from_union([from_str, from_none], self.name)
        result["full_name"] = from_union([from_str, from_none], self.full_name)
        result["private"] = from_union([from_bool, from_none], self.private)
        result["owner"] = from_union([lambda x: to_class(Sender, x), from_none], self.owner)
        result["html_url"] = from_union([from_str, from_none], self.html_url)
        result["description"] = from_union([from_str, from_none], self.description)
        result["fork"] = from_union([from_bool, from_none], self.fork)
        result["url"] = from_union([from_str, from_none], self.url)
        result["forks_url"] = from_union([from_str, from_none], self.forks_url)
        result["keys_url"] = from_union([from_str, from_none], self.keys_url)
        result["collaborators_url"] = from_union([from_str, from_none], self.collaborators_url)
        result["teams_url"] = from_union([from_str, from_none], self.teams_url)
        result["hooks_url"] = from_union([from_str, from_none], self.hooks_url)
        result["issue_events_url"] = from_union([from_str, from_none], self.issue_events_url)
        result["events_url"] = from_union([from_str, from_none], self.events_url)
        result["assignees_url"] = from_union([from_str, from_none], self.assignees_url)
        result["branches_url"] = from_union([from_str, from_none], self.branches_url)
        result["tags_url"] = from_union([from_str, from_none], self.tags_url)
        result["blobs_url"] = from_union([from_str, from_none], self.blobs_url)
        result["git_tags_url"] = from_union([from_str, from_none], self.git_tags_url)
        result["git_refs_url"] = from_union([from_str, from_none], self.git_refs_url)
        result["trees_url"] = from_union([from_str, from_none], self.trees_url)
        result["statuses_url"] = from_union([from_str, from_none], self.statuses_url)
        result["languages_url"] = from_union([from_str, from_none], self.languages_url)
        result["stargazers_url"] = from_union([from_str, from_none], self.stargazers_url)
        result["contributors_url"] = from_union([from_str, from_none], self.contributors_url)
        result["subscribers_url"] = from_union([from_str, from_none], self.subscribers_url)
        result["subscription_url"] = from_union([from_str, from_none], self.subscription_url)
        result["commits_url"] = from_union([from_str, from_none], self.commits_url)
        result["git_commits_url"] = from_union([from_str, from_none], self.git_commits_url)
        result["comments_url"] = from_union([from_str, from_none], self.comments_url)
        result["issue_comment_url"] = from_union([from_str, from_none], self.issue_comment_url)
        result["contents_url"] = from_union([from_str, from_none], self.contents_url)
        result["compare_url"] = from_union([from_str, from_none], self.compare_url)
        result["merges_url"] = from_union([from_str, from_none], self.merges_url)
        result["archive_url"] = from_union([from_str, from_none], self.archive_url)
        result["downloads_url"] = from_union([from_str, from_none], self.downloads_url)
        result["issues_url"] = from_union([from_str, from_none], self.issues_url)
        result["pulls_url"] = from_union([from_str, from_none], self.pulls_url)
        result["milestones_url"] = from_union([from_str, from_none], self.milestones_url)
        result["notifications_url"] = from_union([from_str, from_none], self.notifications_url)
        result["labels_url"] = from_union([from_str, from_none], self.labels_url)
        result["releases_url"] = from_union([from_str, from_none], self.releases_url)
        result["deployments_url"] = from_union([from_str, from_none], self.deployments_url)
        result["created_at"] = from_union([from_int, from_none], self.created_at)
        result["updated_at"] = from_union([lambda x: x.isoformat(), from_none], self.updated_at)
        result["pushed_at"] = from_union([from_int, from_none], self.pushed_at)
        result["git_url"] = from_union([from_str, from_none], self.git_url)
        result["ssh_url"] = from_union([from_str, from_none], self.ssh_url)
        result["clone_url"] = from_union([from_str, from_none], self.clone_url)
        result["svn_url"] = from_union([from_str, from_none], self.svn_url)
        result["homepage"] = from_none(self.homepage)
        result["size"] = from_union([from_int, from_none], self.size)
        result["stargazers_count"] = from_union([from_int, from_none], self.stargazers_count)
        result["watchers_count"] = from_union([from_int, from_none], self.watchers_count)
        result["language"] = from_union([from_str, from_none], self.language)
        result["has_issues"] = from_union([from_bool, from_none], self.has_issues)
        result["has_projects"] = from_union([from_bool, from_none], self.has_projects)
        result["has_downloads"] = from_union([from_bool, from_none], self.has_downloads)
        result["has_wiki"] = from_union([from_bool, from_none], self.has_wiki)
        result["has_pages"] = from_union([from_bool, from_none], self.has_pages)
        result["forks_count"] = from_union([from_int, from_none], self.forks_count)
        result["mirror_url"] = from_none(self.mirror_url)
        result["archived"] = from_union([from_bool, from_none], self.archived)
        result["open_issues_count"] = from_union([from_int, from_none], self.open_issues_count)
        result["license"] = from_none(self.license)
        result["forks"] = from_union([from_int, from_none], self.forks)
        result["open_issues"] = from_union([from_int, from_none], self.open_issues)
        result["watchers"] = from_union([from_int, from_none], self.watchers)
        result["default_branch"] = from_union([from_str, from_none], self.default_branch)
        result["stargazers"] = from_union([from_int, from_none], self.stargazers)
        result["master_branch"] = from_union([from_str, from_none], self.master_branch)
        return result


class PushWebhook:
    ref: Optional[str]
    before: Optional[str]
    after: Optional[str]
    created: Optional[bool]
    deleted: Optional[bool]
    forced: Optional[bool]
    base_ref: None
    compare: Optional[str]
    commits: Optional[List[Commit]]
    head_commit: Optional[Commit]
    repository: Optional[Repository]
    pusher: Optional[Pusher]
    sender: Optional[Sender]

    def __init__(self, ref: Optional[str], before: Optional[str], after: Optional[str], created: Optional[bool],
                 deleted: Optional[bool], forced: Optional[bool], base_ref: None, compare: Optional[str],
                 commits: Optional[List[Commit]], head_commit: Optional[Commit], repository: Optional[Repository],
                 pusher: Optional[Pusher], sender: Optional[Sender]) -> None:
        self.ref = ref
        self.before = before
        self.after = after
        self.created = created
        self.deleted = deleted
        self.forced = forced
        self.base_ref = base_ref
        self.compare = compare
        self.commits: list[Commit] = commits
        self.head_commit = head_commit
        self.repository = repository
        self.pusher = pusher
        self.sender = sender

    @staticmethod
    def from_dict(obj: Any) -> 'PushWebhook':
        assert isinstance(obj, dict)
        ref = from_union([from_str, from_none], obj.get("ref"))
        before = from_union([from_str, from_none], obj.get("before"))
        after = from_union([from_str, from_none], obj.get("after"))
        created = from_union([from_bool, from_none], obj.get("created"))
        deleted = from_union([from_bool, from_none], obj.get("deleted"))
        forced = from_union([from_bool, from_none], obj.get("forced"))
        base_ref = from_none(obj.get("base_ref"))
        compare = from_union([from_str, from_none], obj.get("compare"))
        commits = from_union([lambda x: from_list(Commit.from_dict, x), from_none], obj.get("commits"))
        head_commit = from_union([Commit.from_dict, from_none], obj.get("head_commit"))
        repository = from_union([Repository.from_dict, from_none], obj.get("repository"))
        pusher = from_union([Pusher.from_dict, from_none], obj.get("pusher"))
        sender = from_union([Sender.from_dict, from_none], obj.get("sender"))
        return PushWebhook(ref, before, after, created, deleted, forced, base_ref, compare, commits, head_commit,
                           repository, pusher, sender)

    def to_dict(self) -> dict:
        result: dict = {}
        result["ref"] = from_union([from_str, from_none], self.ref)
        result["before"] = from_union([from_str, from_none], self.before)
        result["after"] = from_union([from_str, from_none], self.after)
        result["created"] = from_union([from_bool, from_none], self.created)
        result["deleted"] = from_union([from_bool, from_none], self.deleted)
        result["forced"] = from_union([from_bool, from_none], self.forced)
        result["base_ref"] = from_none(self.base_ref)
        result["compare"] = from_union([from_str, from_none], self.compare)
        result["commits"] = from_union([lambda x: from_list(lambda x: to_class(Commit, x), x), from_none], self.commits)
        result["head_commit"] = from_union([lambda x: to_class(Commit, x), from_none], self.head_commit)
        result["repository"] = from_union([lambda x: to_class(Repository, x), from_none], self.repository)
        result["pusher"] = from_union([lambda x: to_class(Pusher, x), from_none], self.pusher)
        result["sender"] = from_union([lambda x: to_class(Sender, x), from_none], self.sender)
        return result


def push_webhook_from_dict(s: Any) -> PushWebhook:
    return PushWebhook.from_dict(s)


def push_webhook_to_dict(x: PushWebhook) -> Any:
    return to_class(PushWebhook, x)


# export only these two functions by default
__all__ = [
    'push_webhook_to_dict',
    'push_webhook_from_dict'
]
